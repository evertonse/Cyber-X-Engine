from dataclasses import dataclass
from formatcolors import green, red
import subprocess

__filename__ =  __file__[__file__.rindex('\\')+1:]
def debug(*args,**kwargs):
	print(f'[{ __filename__}]',*args,**kwargs)

@dataclass
class ProjectBuild:
	source_files	:list[str]
	header_folders	:list[str]
	lib_folders		:list[str]
	lib_files		:list[str]

def generate_tasks(args:str):
	with open("tasks.json", "w") as f:
		f.write("""
		{
			"tasks": [
				{
					"type": "cppbuild",
					"label": "C/C++: g++.exe build active file",
					"command": "C:\\Strawberry\\c\\bin\\g++.exe",
					"args": [
						{%s}
					],
					"options": {
						"cwd": "${fileDirname}"
					},
					"problemMatcher": [
						"$gcc"
					],
					"group": {
						"kind": "build",
						"isDefault": true
					},
					"detail": "Task generated by Debugger."
				}
			],
			"version": "2.0.0"
		}
	""" % repr(args))

def create_cmd(
	compiler:str, executable_filename:str, 
	warnings:str, version:str, 
	project:ProjectBuild) -> str:
	
	version = version if version else "c++17"
	cmd = f'{compiler} -std={version}'

	for file in project.source_files:
		cmd += f' {file} '

	for warning in warnings:
		cmd += f' -W{warning} '
 
	for folder in project.header_folders:
		cmd += f' -I"{folder}" '

	for folder in project.lib_folders:
		cmd += f' -L"{folder}" '

	for file in project.lib_files:
		cmd += f' -l{file} '
		
	cmd += f'-o{executable_filename}'
	
	return cmd

def __main__():
	config = {
		"compiler" : 'g++', 
		"warnings" : ['all'],
		"exec_name" : 'main'
	}
	source_files = list()
	import os
	for file in os.listdir("./"):
		if file.endswith(".cpp") or file.endswith(".c"):
			source_files.append(os.path.join("", file))
	
	project_vs = ProjectBuild (
		source_files = source_files,
		
		header_folders = [
			'C:\dev\libs\SDL2\include\\'
		],
		
		lib_folders = [
			'C:\dev\libs\SDL2\lib\\x64\\'
		],
		
		lib_files = [
			'"SDL2main"',
			'"SDL2"'
		]
	)
	
	project_mingw = ProjectBuild (
		source_files = source_files,
		
		header_folders = [
			'C:\\dev\\libs\\SDL2mingw\\x86_64-w64-mingw32\\include\\SDL2'
		],
		
		lib_folders = [
			'C:\\dev\\libs\\SDL2mingw\\x86_64-w64-mingw32\\lib'
		],
		
		lib_files = [
			'mingw32',
			'SDL2main',
			'SDL2',
		]
	)
	
	cmd = create_cmd(
		config['compiler'],
		config['exec_name'],
		config['warnings'],
		"",
		project_mingw
	)
	
	debug(cmd)
	code = subprocess.run(cmd)
	generate_tasks(cmd)
	if code.returncode == 0:
		debug(f'[INFO]: {green("Compiled")} return code was zero, usually means success')
		subprocess.run(config['exec_name'])
	else:
		debug(f'[ERROR]: return code was {red("non-zero")}, usually means bad things')

if __name__ == '__main__':
	__main__()